name: Run Python üêç matrix test
on: push
jobs:
  ci:
    name: Run Python üêç matrix test
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-20.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master
        with:
          path: source
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup poetry 1.1.4
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.4
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: venvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.os }}-${{ matrix.python-version }}-b
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.os }}-${{ matrix.python-version }}-b
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ../venvs
        working-directory: ./source
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: ./source
      - name: Code Quality
        run: poetry run black . --check
        working-directory: ./source
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E203
        working-directory: ./source
      - name: Test with pytest
        run: |
          poetry run pytest --doctest-modules --junitxml=junit/test-results.xml --cov=pwnedpasswords_offline --cov-report=xml --cov-report=html
        working-directory: ./source
      - name: Build a binary wheel and a source tarball
        run: poetry build
        working-directory: ./source
  publish:
    name: Publish üì¶ to PyPI
    needs: ci
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
        with:
          path: source
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup poetry 1.1.4
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.4
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: venvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.os }}-${{ matrix.python-version }}-b
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ matrix.os }}-${{ matrix.python-version }}-b
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ../venvs
        working-directory: ./source
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: ./source
      - name: Build a binary wheel and a source tarball
        run: poetry build
        working-directory: ./source
      - name: Publish distribution üì¶ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: ./source/dist
